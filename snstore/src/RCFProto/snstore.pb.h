// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: snstore.proto

#ifndef PROTOBUF_snstore_2eproto__INCLUDED
#define PROTOBUF_snstore_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_snstore_2eproto();
void protobuf_AssignDesc_snstore_2eproto();
void protobuf_ShutdownFile_snstore_2eproto();

class TxRequest;
class TxRequest_Request;
class TxResponse;
class TxResponse_Map;

enum TxRequest_Request_OpCode {
  TxRequest_Request_OpCode_GET = 0,
  TxRequest_Request_OpCode_PUT = 1,
  TxRequest_Request_OpCode_GETRANGE = 2
};
bool TxRequest_Request_OpCode_IsValid(int value);
const TxRequest_Request_OpCode TxRequest_Request_OpCode_OpCode_MIN = TxRequest_Request_OpCode_GET;
const TxRequest_Request_OpCode TxRequest_Request_OpCode_OpCode_MAX = TxRequest_Request_OpCode_GETRANGE;
const int TxRequest_Request_OpCode_OpCode_ARRAYSIZE = TxRequest_Request_OpCode_OpCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* TxRequest_Request_OpCode_descriptor();
inline const ::std::string& TxRequest_Request_OpCode_Name(TxRequest_Request_OpCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    TxRequest_Request_OpCode_descriptor(), value);
}
inline bool TxRequest_Request_OpCode_Parse(
    const ::std::string& name, TxRequest_Request_OpCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TxRequest_Request_OpCode>(
    TxRequest_Request_OpCode_descriptor(), name, value);
}
// ===================================================================

class TxRequest_Request : public ::google::protobuf::Message {
 public:
  TxRequest_Request();
  virtual ~TxRequest_Request();

  TxRequest_Request(const TxRequest_Request& from);

  inline TxRequest_Request& operator=(const TxRequest_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TxRequest_Request& default_instance();

  void Swap(TxRequest_Request* other);

  // implements Message ----------------------------------------------

  TxRequest_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TxRequest_Request& from);
  void MergeFrom(const TxRequest_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TxRequest_Request_OpCode OpCode;
  static const OpCode GET = TxRequest_Request_OpCode_GET;
  static const OpCode PUT = TxRequest_Request_OpCode_PUT;
  static const OpCode GETRANGE = TxRequest_Request_OpCode_GETRANGE;
  static inline bool OpCode_IsValid(int value) {
    return TxRequest_Request_OpCode_IsValid(value);
  }
  static const OpCode OpCode_MIN =
    TxRequest_Request_OpCode_OpCode_MIN;
  static const OpCode OpCode_MAX =
    TxRequest_Request_OpCode_OpCode_MAX;
  static const int OpCode_ARRAYSIZE =
    TxRequest_Request_OpCode_OpCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OpCode_descriptor() {
    return TxRequest_Request_OpCode_descriptor();
  }
  static inline const ::std::string& OpCode_Name(OpCode value) {
    return TxRequest_Request_OpCode_Name(value);
  }
  static inline bool OpCode_Parse(const ::std::string& name,
      OpCode* value) {
    return TxRequest_Request_OpCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .TxRequest.Request.OpCode op = 1;
  inline bool has_op() const;
  inline void clear_op();
  static const int kOpFieldNumber = 1;
  inline ::TxRequest_Request_OpCode op() const;
  inline void set_op(::TxRequest_Request_OpCode value);

  // optional int32 key1 = 2;
  inline bool has_key1() const;
  inline void clear_key1();
  static const int kKey1FieldNumber = 2;
  inline ::google::protobuf::int32 key1() const;
  inline void set_key1(::google::protobuf::int32 value);

  // optional string value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // optional int32 key2 = 4;
  inline bool has_key2() const;
  inline void clear_key2();
  static const int kKey2FieldNumber = 4;
  inline ::google::protobuf::int32 key2() const;
  inline void set_key2(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TxRequest.Request)
 private:
  inline void set_has_op();
  inline void clear_has_op();
  inline void set_has_key1();
  inline void clear_has_key1();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_key2();
  inline void clear_has_key2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int op_;
  ::google::protobuf::int32 key1_;
  ::std::string* value_;
  ::google::protobuf::int32 key2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_snstore_2eproto();
  friend void protobuf_AssignDesc_snstore_2eproto();
  friend void protobuf_ShutdownFile_snstore_2eproto();

  void InitAsDefaultInstance();
  static TxRequest_Request* default_instance_;
};
// -------------------------------------------------------------------

class TxRequest : public ::google::protobuf::Message {
 public:
  TxRequest();
  virtual ~TxRequest();

  TxRequest(const TxRequest& from);

  inline TxRequest& operator=(const TxRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TxRequest& default_instance();

  void Swap(TxRequest* other);

  // implements Message ----------------------------------------------

  TxRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TxRequest& from);
  void MergeFrom(const TxRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TxRequest_Request Request;

  // accessors -------------------------------------------------------

  // repeated .TxRequest.Request reqs = 1;
  inline int reqs_size() const;
  inline void clear_reqs();
  static const int kReqsFieldNumber = 1;
  inline const ::TxRequest_Request& reqs(int index) const;
  inline ::TxRequest_Request* mutable_reqs(int index);
  inline ::TxRequest_Request* add_reqs();
  inline const ::google::protobuf::RepeatedPtrField< ::TxRequest_Request >&
      reqs() const;
  inline ::google::protobuf::RepeatedPtrField< ::TxRequest_Request >*
      mutable_reqs();

  // @@protoc_insertion_point(class_scope:TxRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::TxRequest_Request > reqs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_snstore_2eproto();
  friend void protobuf_AssignDesc_snstore_2eproto();
  friend void protobuf_ShutdownFile_snstore_2eproto();

  void InitAsDefaultInstance();
  static TxRequest* default_instance_;
};
// -------------------------------------------------------------------

class TxResponse_Map : public ::google::protobuf::Message {
 public:
  TxResponse_Map();
  virtual ~TxResponse_Map();

  TxResponse_Map(const TxResponse_Map& from);

  inline TxResponse_Map& operator=(const TxResponse_Map& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TxResponse_Map& default_instance();

  void Swap(TxResponse_Map* other);

  // implements Message ----------------------------------------------

  TxResponse_Map* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TxResponse_Map& from);
  void MergeFrom(const TxResponse_Map& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);

  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:TxResponse.Map)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* value_;
  ::google::protobuf::int32 key_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_snstore_2eproto();
  friend void protobuf_AssignDesc_snstore_2eproto();
  friend void protobuf_ShutdownFile_snstore_2eproto();

  void InitAsDefaultInstance();
  static TxResponse_Map* default_instance_;
};
// -------------------------------------------------------------------

class TxResponse : public ::google::protobuf::Message {
 public:
  TxResponse();
  virtual ~TxResponse();

  TxResponse(const TxResponse& from);

  inline TxResponse& operator=(const TxResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TxResponse& default_instance();

  void Swap(TxResponse* other);

  // implements Message ----------------------------------------------

  TxResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TxResponse& from);
  void MergeFrom(const TxResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TxResponse_Map Map;

  // accessors -------------------------------------------------------

  // repeated .TxResponse.Map retvalue = 1;
  inline int retvalue_size() const;
  inline void clear_retvalue();
  static const int kRetvalueFieldNumber = 1;
  inline const ::TxResponse_Map& retvalue(int index) const;
  inline ::TxResponse_Map* mutable_retvalue(int index);
  inline ::TxResponse_Map* add_retvalue();
  inline const ::google::protobuf::RepeatedPtrField< ::TxResponse_Map >&
      retvalue() const;
  inline ::google::protobuf::RepeatedPtrField< ::TxResponse_Map >*
      mutable_retvalue();

  // @@protoc_insertion_point(class_scope:TxResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::TxResponse_Map > retvalue_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_snstore_2eproto();
  friend void protobuf_AssignDesc_snstore_2eproto();
  friend void protobuf_ShutdownFile_snstore_2eproto();

  void InitAsDefaultInstance();
  static TxResponse* default_instance_;
};
// ===================================================================

class DbService_Stub;

class DbService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline DbService() {};
 public:
  virtual ~DbService();

  typedef DbService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void execTx(::google::protobuf::RpcController* controller,
                       const ::TxRequest* request,
                       ::TxResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(DbService);
};

class DbService_Stub : public DbService {
 public:
  DbService_Stub(::google::protobuf::RpcChannel* channel);
  DbService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~DbService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements DbService ------------------------------------------

  void execTx(::google::protobuf::RpcController* controller,
                       const ::TxRequest* request,
                       ::TxResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(DbService_Stub);
};


// ===================================================================


// ===================================================================

// TxRequest_Request

// required .TxRequest.Request.OpCode op = 1;
inline bool TxRequest_Request::has_op() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TxRequest_Request::set_has_op() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TxRequest_Request::clear_has_op() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TxRequest_Request::clear_op() {
  op_ = 0;
  clear_has_op();
}
inline ::TxRequest_Request_OpCode TxRequest_Request::op() const {
  return static_cast< ::TxRequest_Request_OpCode >(op_);
}
inline void TxRequest_Request::set_op(::TxRequest_Request_OpCode value) {
  assert(::TxRequest_Request_OpCode_IsValid(value));
  set_has_op();
  op_ = value;
}

// optional int32 key1 = 2;
inline bool TxRequest_Request::has_key1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TxRequest_Request::set_has_key1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TxRequest_Request::clear_has_key1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TxRequest_Request::clear_key1() {
  key1_ = 0;
  clear_has_key1();
}
inline ::google::protobuf::int32 TxRequest_Request::key1() const {
  return key1_;
}
inline void TxRequest_Request::set_key1(::google::protobuf::int32 value) {
  set_has_key1();
  key1_ = value;
}

// optional string value = 3;
inline bool TxRequest_Request::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TxRequest_Request::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TxRequest_Request::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TxRequest_Request::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& TxRequest_Request::value() const {
  return *value_;
}
inline void TxRequest_Request::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void TxRequest_Request::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void TxRequest_Request::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TxRequest_Request::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* TxRequest_Request::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TxRequest_Request::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 key2 = 4;
inline bool TxRequest_Request::has_key2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TxRequest_Request::set_has_key2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TxRequest_Request::clear_has_key2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TxRequest_Request::clear_key2() {
  key2_ = 0;
  clear_has_key2();
}
inline ::google::protobuf::int32 TxRequest_Request::key2() const {
  return key2_;
}
inline void TxRequest_Request::set_key2(::google::protobuf::int32 value) {
  set_has_key2();
  key2_ = value;
}

// -------------------------------------------------------------------

// TxRequest

// repeated .TxRequest.Request reqs = 1;
inline int TxRequest::reqs_size() const {
  return reqs_.size();
}
inline void TxRequest::clear_reqs() {
  reqs_.Clear();
}
inline const ::TxRequest_Request& TxRequest::reqs(int index) const {
  return reqs_.Get(index);
}
inline ::TxRequest_Request* TxRequest::mutable_reqs(int index) {
  return reqs_.Mutable(index);
}
inline ::TxRequest_Request* TxRequest::add_reqs() {
  return reqs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TxRequest_Request >&
TxRequest::reqs() const {
  return reqs_;
}
inline ::google::protobuf::RepeatedPtrField< ::TxRequest_Request >*
TxRequest::mutable_reqs() {
  return &reqs_;
}

// -------------------------------------------------------------------

// TxResponse_Map

// required int32 key = 1;
inline bool TxResponse_Map::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TxResponse_Map::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TxResponse_Map::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TxResponse_Map::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 TxResponse_Map::key() const {
  return key_;
}
inline void TxResponse_Map::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
}

// required string value = 2;
inline bool TxResponse_Map::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TxResponse_Map::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TxResponse_Map::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TxResponse_Map::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& TxResponse_Map::value() const {
  return *value_;
}
inline void TxResponse_Map::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void TxResponse_Map::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void TxResponse_Map::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TxResponse_Map::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* TxResponse_Map::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TxResponse_Map::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TxResponse

// repeated .TxResponse.Map retvalue = 1;
inline int TxResponse::retvalue_size() const {
  return retvalue_.size();
}
inline void TxResponse::clear_retvalue() {
  retvalue_.Clear();
}
inline const ::TxResponse_Map& TxResponse::retvalue(int index) const {
  return retvalue_.Get(index);
}
inline ::TxResponse_Map* TxResponse::mutable_retvalue(int index) {
  return retvalue_.Mutable(index);
}
inline ::TxResponse_Map* TxResponse::add_retvalue() {
  return retvalue_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TxResponse_Map >&
TxResponse::retvalue() const {
  return retvalue_;
}
inline ::google::protobuf::RepeatedPtrField< ::TxResponse_Map >*
TxResponse::mutable_retvalue() {
  return &retvalue_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TxRequest_Request_OpCode>() {
  return ::TxRequest_Request_OpCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_snstore_2eproto__INCLUDED

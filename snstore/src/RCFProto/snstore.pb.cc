// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: snstore.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "snstore.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* TxRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TxRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TxRequest_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TxRequest_Request_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TxRequest_Request_OpCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TxResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TxResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TxResponse_Map_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TxResponse_Map_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* DbService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_snstore_2eproto() {
  protobuf_AddDesc_snstore_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "snstore.proto");
  GOOGLE_CHECK(file != NULL);
  TxRequest_descriptor_ = file->message_type(0);
  static const int TxRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxRequest, reqs_),
  };
  TxRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TxRequest_descriptor_,
      TxRequest::default_instance_,
      TxRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TxRequest));
  TxRequest_Request_descriptor_ = TxRequest_descriptor_->nested_type(0);
  static const int TxRequest_Request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxRequest_Request, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxRequest_Request, key1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxRequest_Request, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxRequest_Request, key2_),
  };
  TxRequest_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TxRequest_Request_descriptor_,
      TxRequest_Request::default_instance_,
      TxRequest_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxRequest_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxRequest_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TxRequest_Request));
  TxRequest_Request_OpCode_descriptor_ = TxRequest_Request_descriptor_->enum_type(0);
  TxResponse_descriptor_ = file->message_type(1);
  static const int TxResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxResponse, retvalue_),
  };
  TxResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TxResponse_descriptor_,
      TxResponse::default_instance_,
      TxResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TxResponse));
  TxResponse_Map_descriptor_ = TxResponse_descriptor_->nested_type(0);
  static const int TxResponse_Map_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxResponse_Map, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxResponse_Map, value_),
  };
  TxResponse_Map_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TxResponse_Map_descriptor_,
      TxResponse_Map::default_instance_,
      TxResponse_Map_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxResponse_Map, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxResponse_Map, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TxResponse_Map));
  DbService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_snstore_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TxRequest_descriptor_, &TxRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TxRequest_Request_descriptor_, &TxRequest_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TxResponse_descriptor_, &TxResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TxResponse_Map_descriptor_, &TxResponse_Map::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_snstore_2eproto() {
  delete TxRequest::default_instance_;
  delete TxRequest_reflection_;
  delete TxRequest_Request::default_instance_;
  delete TxRequest_Request_reflection_;
  delete TxResponse::default_instance_;
  delete TxResponse_reflection_;
  delete TxResponse_Map::default_instance_;
  delete TxResponse_Map_reflection_;
}

void protobuf_AddDesc_snstore_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rsnstore.proto\"\265\001\n\tTxRequest\022 \n\004reqs\030\001 "
    "\003(\0132\022.TxRequest.Request\032\205\001\n\007Request\022%\n\002o"
    "p\030\001 \002(\0162\031.TxRequest.Request.OpCode\022\014\n\004ke"
    "y1\030\002 \001(\005\022\r\n\005value\030\003 \001(\t\022\014\n\004key2\030\004 \001(\005\"(\n"
    "\006OpCode\022\007\n\003GET\020\000\022\007\n\003PUT\020\001\022\014\n\010GETRANGE\020\002\""
    "R\n\nTxResponse\022!\n\010retvalue\030\001 \003(\0132\017.TxResp"
    "onse.Map\032!\n\003Map\022\013\n\003key\030\001 \002(\005\022\r\n\005value\030\002 "
    "\002(\t2.\n\tDbService\022!\n\006execTx\022\n.TxRequest\032\013"
    ".TxResponseB\t\200\001\001\210\001\001\220\001\001", 342);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "snstore.proto", &protobuf_RegisterTypes);
  TxRequest::default_instance_ = new TxRequest();
  TxRequest_Request::default_instance_ = new TxRequest_Request();
  TxResponse::default_instance_ = new TxResponse();
  TxResponse_Map::default_instance_ = new TxResponse_Map();
  TxRequest::default_instance_->InitAsDefaultInstance();
  TxRequest_Request::default_instance_->InitAsDefaultInstance();
  TxResponse::default_instance_->InitAsDefaultInstance();
  TxResponse_Map::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_snstore_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_snstore_2eproto {
  StaticDescriptorInitializer_snstore_2eproto() {
    protobuf_AddDesc_snstore_2eproto();
  }
} static_descriptor_initializer_snstore_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* TxRequest_Request_OpCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TxRequest_Request_OpCode_descriptor_;
}
bool TxRequest_Request_OpCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TxRequest_Request_OpCode TxRequest_Request::GET;
const TxRequest_Request_OpCode TxRequest_Request::PUT;
const TxRequest_Request_OpCode TxRequest_Request::GETRANGE;
const TxRequest_Request_OpCode TxRequest_Request::OpCode_MIN;
const TxRequest_Request_OpCode TxRequest_Request::OpCode_MAX;
const int TxRequest_Request::OpCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TxRequest_Request::kOpFieldNumber;
const int TxRequest_Request::kKey1FieldNumber;
const int TxRequest_Request::kValueFieldNumber;
const int TxRequest_Request::kKey2FieldNumber;
#endif  // !_MSC_VER

TxRequest_Request::TxRequest_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TxRequest_Request::InitAsDefaultInstance() {
}

TxRequest_Request::TxRequest_Request(const TxRequest_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TxRequest_Request::SharedCtor() {
  _cached_size_ = 0;
  op_ = 0;
  key1_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TxRequest_Request::~TxRequest_Request() {
  SharedDtor();
}

void TxRequest_Request::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void TxRequest_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TxRequest_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TxRequest_Request_descriptor_;
}

const TxRequest_Request& TxRequest_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snstore_2eproto();
  return *default_instance_;
}

TxRequest_Request* TxRequest_Request::default_instance_ = NULL;

TxRequest_Request* TxRequest_Request::New() const {
  return new TxRequest_Request;
}

void TxRequest_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_ = 0;
    key1_ = 0;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    key2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TxRequest_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TxRequest.Request.OpCode op = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TxRequest_Request_OpCode_IsValid(value)) {
            set_op(static_cast< ::TxRequest_Request_OpCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_key1;
        break;
      }

      // optional int32 key1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key1_)));
          set_has_key1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional string value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_key2;
        break;
      }

      // optional int32 key2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key2_)));
          set_has_key2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TxRequest_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TxRequest.Request.OpCode op = 1;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op(), output);
  }

  // optional int32 key1 = 2;
  if (has_key1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->key1(), output);
  }

  // optional string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->value(), output);
  }

  // optional int32 key2 = 4;
  if (has_key2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->key2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TxRequest_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TxRequest.Request.OpCode op = 1;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op(), target);
  }

  // optional int32 key1 = 2;
  if (has_key1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->key1(), target);
  }

  // optional string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }

  // optional int32 key2 = 4;
  if (has_key2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->key2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TxRequest_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TxRequest.Request.OpCode op = 1;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
    }

    // optional int32 key1 = 2;
    if (has_key1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key1());
    }

    // optional string value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional int32 key2 = 4;
    if (has_key2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxRequest_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TxRequest_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TxRequest_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TxRequest_Request::MergeFrom(const TxRequest_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_key1()) {
      set_key1(from.key1());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_key2()) {
      set_key2(from.key2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TxRequest_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxRequest_Request::CopyFrom(const TxRequest_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxRequest_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TxRequest_Request::Swap(TxRequest_Request* other) {
  if (other != this) {
    std::swap(op_, other->op_);
    std::swap(key1_, other->key1_);
    std::swap(value_, other->value_);
    std::swap(key2_, other->key2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TxRequest_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TxRequest_Request_descriptor_;
  metadata.reflection = TxRequest_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TxRequest::kReqsFieldNumber;
#endif  // !_MSC_VER

TxRequest::TxRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TxRequest::InitAsDefaultInstance() {
}

TxRequest::TxRequest(const TxRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TxRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TxRequest::~TxRequest() {
  SharedDtor();
}

void TxRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TxRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TxRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TxRequest_descriptor_;
}

const TxRequest& TxRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snstore_2eproto();
  return *default_instance_;
}

TxRequest* TxRequest::default_instance_ = NULL;

TxRequest* TxRequest::New() const {
  return new TxRequest;
}

void TxRequest::Clear() {
  reqs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TxRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TxRequest.Request reqs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reqs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reqs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_reqs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TxRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TxRequest.Request reqs = 1;
  for (int i = 0; i < this->reqs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reqs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TxRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TxRequest.Request reqs = 1;
  for (int i = 0; i < this->reqs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reqs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TxRequest::ByteSize() const {
  int total_size = 0;

  // repeated .TxRequest.Request reqs = 1;
  total_size += 1 * this->reqs_size();
  for (int i = 0; i < this->reqs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reqs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TxRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TxRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TxRequest::MergeFrom(const TxRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  reqs_.MergeFrom(from.reqs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TxRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxRequest::CopyFrom(const TxRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxRequest::IsInitialized() const {

  for (int i = 0; i < reqs_size(); i++) {
    if (!this->reqs(i).IsInitialized()) return false;
  }
  return true;
}

void TxRequest::Swap(TxRequest* other) {
  if (other != this) {
    reqs_.Swap(&other->reqs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TxRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TxRequest_descriptor_;
  metadata.reflection = TxRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TxResponse_Map::kKeyFieldNumber;
const int TxResponse_Map::kValueFieldNumber;
#endif  // !_MSC_VER

TxResponse_Map::TxResponse_Map()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TxResponse_Map::InitAsDefaultInstance() {
}

TxResponse_Map::TxResponse_Map(const TxResponse_Map& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TxResponse_Map::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TxResponse_Map::~TxResponse_Map() {
  SharedDtor();
}

void TxResponse_Map::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void TxResponse_Map::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TxResponse_Map::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TxResponse_Map_descriptor_;
}

const TxResponse_Map& TxResponse_Map::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snstore_2eproto();
  return *default_instance_;
}

TxResponse_Map* TxResponse_Map::default_instance_ = NULL;

TxResponse_Map* TxResponse_Map::New() const {
  return new TxResponse_Map;
}

void TxResponse_Map::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TxResponse_Map::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TxResponse_Map::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TxResponse_Map::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TxResponse_Map::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxResponse_Map::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TxResponse_Map* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TxResponse_Map*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TxResponse_Map::MergeFrom(const TxResponse_Map& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TxResponse_Map::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxResponse_Map::CopyFrom(const TxResponse_Map& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxResponse_Map::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TxResponse_Map::Swap(TxResponse_Map* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TxResponse_Map::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TxResponse_Map_descriptor_;
  metadata.reflection = TxResponse_Map_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TxResponse::kRetvalueFieldNumber;
#endif  // !_MSC_VER

TxResponse::TxResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TxResponse::InitAsDefaultInstance() {
}

TxResponse::TxResponse(const TxResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TxResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TxResponse::~TxResponse() {
  SharedDtor();
}

void TxResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TxResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TxResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TxResponse_descriptor_;
}

const TxResponse& TxResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snstore_2eproto();
  return *default_instance_;
}

TxResponse* TxResponse::default_instance_ = NULL;

TxResponse* TxResponse::New() const {
  return new TxResponse;
}

void TxResponse::Clear() {
  retvalue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TxResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TxResponse.Map retvalue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_retvalue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_retvalue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_retvalue;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TxResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TxResponse.Map retvalue = 1;
  for (int i = 0; i < this->retvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->retvalue(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TxResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TxResponse.Map retvalue = 1;
  for (int i = 0; i < this->retvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->retvalue(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TxResponse::ByteSize() const {
  int total_size = 0;

  // repeated .TxResponse.Map retvalue = 1;
  total_size += 1 * this->retvalue_size();
  for (int i = 0; i < this->retvalue_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->retvalue(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TxResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TxResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TxResponse::MergeFrom(const TxResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  retvalue_.MergeFrom(from.retvalue_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TxResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxResponse::CopyFrom(const TxResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxResponse::IsInitialized() const {

  for (int i = 0; i < retvalue_size(); i++) {
    if (!this->retvalue(i).IsInitialized()) return false;
  }
  return true;
}

void TxResponse::Swap(TxResponse* other) {
  if (other != this) {
    retvalue_.Swap(&other->retvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TxResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TxResponse_descriptor_;
  metadata.reflection = TxResponse_reflection_;
  return metadata;
}


// ===================================================================

DbService::~DbService() {}

const ::google::protobuf::ServiceDescriptor* DbService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DbService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* DbService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return DbService_descriptor_;
}

void DbService::execTx(::google::protobuf::RpcController* controller,
                         const ::TxRequest*,
                         ::TxResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method execTx() not implemented.");
  done->Run();
}

void DbService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), DbService_descriptor_);
  switch(method->index()) {
    case 0:
      execTx(controller,
             ::google::protobuf::down_cast<const ::TxRequest*>(request),
             ::google::protobuf::down_cast< ::TxResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& DbService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::TxRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& DbService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::TxResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

DbService_Stub::DbService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
DbService_Stub::DbService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
DbService_Stub::~DbService_Stub() {
  if (owns_channel_) delete channel_;
}

void DbService_Stub::execTx(::google::protobuf::RpcController* controller,
                              const ::TxRequest* request,
                              ::TxResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
